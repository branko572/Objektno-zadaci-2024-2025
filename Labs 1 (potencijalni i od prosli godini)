VO C++ SE SITE ZADACI RESENI

1.
За програмски јазик да се употреби C.

Да се напише програма во која од стандарден влез се внесува бројот N (бројот на трансакции), а потоа N трансакциски сметки и како резултат ги печати идентификацискиот број и вкупната сума (со провизија) на сите трансакции платени со кредитна картичка. Во случај да нема трансакција платена со кредитна картичка да се испечати "No credit card transaction".

Во структурата Трансакција (Transaction) треба да се чуваат следните информации:
- Идентификациски број (int)
- Платена сума (int)
- Провизија (int)
- Дали е платено со дебитна или кредитна картичка (0 - дебитна, 1 - кредитна)

Ограничување: 0 < N < 100

Структура на влезните податоци:
N
id1 sum1 commission1 type1
...
idn sumn Commissionn typen

For example:

Input	Result
3
1 100 10 0
2 202 20 1
3 10 1 1
2 222
3 11



#include <iostream>
#include <string>

using namespace std;


typedef struct {
    int id;
    int sum;
    int provision;
    int paid;
}Transaction;



int main() {

    Transaction t[100];

    int n;
    int totalsamount=0;
        bool flag= false;
    cin>>n;

    for(int i=0;i<n;i++){
        cin>>t[i].id>>t[i].sum>>t[i].provision>>t[i].paid;
        if(t[i].paid==1){
            flag= true;
            totalsamount=t[i].sum+t[i].provision;
            cout<<t[i].id<<" "<<totalsamount<<endl;
        }

    }
    if(flag==false){
        cout<<"No credit card transaction";

    }

    return 0;
}

------------------------------------------------------------------------

VO C KAKO BILA RESENA: 


#include <stdio.h>

#define MAX_TRANSACTIONS 100

typedef struct {
    int id;
    int amount;
    int commission;
    int payment_type;  // 0 - debit, 1 - credit
} Transaction;

int main() {
    Transaction transactions[MAX_TRANSACTIONS];
    int n;
    int total_credit_amount = 0;

    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        scanf("%d %d %d %d", &transactions[i].id, &transactions[i].amount, &transactions[i].commission, &transactions[i].payment_type);

        if (transactions[i].payment_type == 1) {
            total_credit_amount += transactions[i].amount + transactions[i].commission;
        }
    }

    if (total_credit_amount > 0) {
        for (int i = 0; i < n; i++) {
            if (transactions[i].payment_type == 1) {
                printf("%d %d\n", transactions[i].id, transactions[i].amount + transactions[i].commission);
            }
        }
    } else {
        printf("No credit card transaction\n");
    }

    return 0;
}




2.

За програмски јазик да се употреби C.


Од стандарден влез се внесува број n, број на кругови кои ќе се внесуваат, каде 0<n<100. Потоа во наредните n линии се внесуваат x и y кои го претставуваат центарот на кругот како и радиусот на кругот. На стандарден излез се печати плоштината и центарот само најголемиот круг (со најголема плоштина).



Напомена: Доколку има повеќе кругови со иста плоштина се печати само првиот круг со таа плоштина.



Во структурата Точка (Point) треба да се чуваат следните информации:

-x координата (int)

-y координата (int)



Во структурата Круг (Circle) треба да се чуваат следните информации:

-Центар (Point)

-Радиус (int)



#include <iostream>
#include <string>

using namespace std;



struct Point{
    int x;
    int y;
};

struct Circle{
    int Radius;
    Point center;
};


//plostinata e so formula R^2 *PI

int main() {

    Circle c[100];

        double p=0;
        double max=0;
        int maxindex=0;
    int n;
    cin>>n;

 for(int i=0;i<n;i++){

     cin>>c[i].center.x>>c[i].center.y;
     cin>>c[i].Radius;

     p=c[i].Radius*c[i].Radius*3.14;
     if(max<p){
         max=p;
         maxindex=i;
     }

 }
    cout<<"Largest circle has area of: "<<max<<" with centre: ("<<c[maxindex].center.x<<","<<c[maxindex].center.y<<")";

    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------

VO C

#include <stdio.h>

struct point {
    int x;
    int y;
};

typedef struct point tocka;

struct circle {
    tocka centar;
    int radius;
};

typedef struct circle krug;

int main() {
    int x1;
    int y1;
    int r1;

    int n;
    tocka centar = {0,0};
    krug najgolem = {centar,0};

    scanf("%d",&n);
    for (int i = 0; i < n; ++i) {
        scanf("%d %d %d",&x1,&y1,&r1);
        tocka p1 = {x1,  y1};
        krug c1 = {p1,  r1};

        if(c1.radius>najgolem.radius){
            najgolem=c1;
        }
    }

    printf("Largest circle has area of: %.2f with centre: (%d,%d)\n",najgolem.radius*najgolem.radius*3.14,najgolem.centar.x,najgolem.centar.y);


    return 0;
}



3.

VNIMANIE SO CHAR SE RESAVA NEMOJ DA ISKORISTIS STRING. TEST CASES NA SITE NEMA DA BIDE IST

За програмски јазик да се употреби C.

Да се креира структура Employee во која се чуваат податоци за еден вработен. За вработениот се чуваат информации за името на вработениот (низа од карактери), матичен број (ЕМБГ) на вработениот(низа од карактери), име на одделот во кој што работи (низа од карактери), плата (цел број).

Потоа, да се креира структура Company во која се чуваат податоци за името на компанијата (низа од карактери), низа од вработени во компанијата и број на вработени.

Да се направи функција:

void printEmployeesBelowAverageSalary(Company *comp, int numCompanies)

која што за секоја компанија, ќе ги испечати сите вработени чија што плата е пониска од просекот на платите на сите вработени во таа компанија.

Да се направи функција: 

void printHighestSalaryEmployee(Company *comp, int numCompanies, char *department) 

кoja што за секоја компанија ќе го испечати вработениот со највисока плата во дадениот оддел.

Напомена: Прво од тастатура се чита бројот на компании, потоа компаниите (името и бројот на вработени), а потоа податоците за нивните вработени соодветно, a на крај се чита одделот кој што ќе биде искористен во printHighestSalaryEmployee функцијата.

For example:

Input	Result
2
Apple
3
Vlatko 111111 IT 150000
Nikola 222222 IT 125000
Marko 333333 Accounting 50000
Google
2
Stefan 444444 IT 150000
John 555555 HR 60000
IT
Employees with salaries below the average:
Marko 333333 Accounting 50000
John 555555 HR 60000
Employees with highest salaries for given department: 
Vlatko 111111 IT 150000
Stefan 444444 IT 150000




#include <iostream>
#include <cmath>
#include <cstring>
#include <iomanip>

using namespace std;

typedef struct {
    char name[50];
    char embg[20];
    char oddel[50];
    int plata;
} Employee;

typedef struct {
    char name[50];
    Employee employee[100];
    int numEmployees;
} Company;

void printEmployeesBelowAverageSalary(Company *comp, int numCompanies) {
    cout << "Employees with salaries below the average:" << endl;
    for (int i = 0; i < numCompanies; ++i) {
        double p;
        int sum = 0;
        int num_employees = 0;

        for (int j = 0; j < comp[i].numEmployees; ++j) {
            sum += comp[i].employee[j].plata;
            num_employees++;
        }
        p = (double)sum / num_employees;

        for (int j = 0; j < comp[i].numEmployees; j++) {
            if (comp[i].employee[j].plata < p) {
                cout << comp[i].employee[j].name << " ";
                cout << comp[i].employee[j].embg << " ";
                cout << comp[i].employee[j].oddel << " ";
                cout << comp[i].employee[j].plata << endl;
            }
        }
    }
}

void printHighestSalaryEmployee(Company *comp, int numCompanies, char *department) {
    cout << "Employees with highest salaries for given department:" << endl;
    for (int i = 0; i < numCompanies; i++) {
        Employee highemp;
        int highplata = -1;

        for (int j = 0; j < comp[i].numEmployees; j++) {
            if (strcmp(comp[i].employee[j].oddel, department) == 0 && comp[i].employee[j].plata > highplata) {
                highemp = comp[i].employee[j];
                highplata = comp[i].employee[j].plata;
            }
        }

        cout << highemp.name << " " << highemp.embg << " " << highemp.oddel << " " << highemp.plata << endl;
    }
}

int main() {
    Employee e[100];
    Company c[100];

    int n;
    cin >> n;

    for (int i = 0; i < n; ++i) {
        cin >> c[i].name >> c[i].numEmployees;
        for (int j = 0; j < c[i].numEmployees; ++j) {
            cin >> c[i].employee[j].name >> c[i].employee[j].embg >>
                c[i].employee[j].oddel >> c[i].employee[j].plata;
        }
    }

    char department[50];
    cin >> department;

    printEmployeesBelowAverageSalary(c, n);
    printHighestSalaryEmployee(c, n, department);

    return 0;
}


---------------------------------------------------------------------------------------------------------



#include <stdio.h>
#include <string.h>

#define MAX_EMPLOYEES 100

typedef struct {
    char name[50];
    char embg[14];
    char department[50];
    int salary;
} Employee;

typedef struct {
    char name[50];
    int num_employees;
    Employee employees[MAX_EMPLOYEES];
} Company;

void printEmployeesBelowAverageSalary(Company *comp, int numCompanies) {
    printf("Employees with salaries below the average:\n");
    for (int i = 0; i < numCompanies; i++) {
        int total_salary = 0, num_employees = 0;
        double avg_salary;
        for (int j = 0; j < comp[i].num_employees; j++) {
            total_salary += comp[i].employees[j].salary;
            num_employees++;
        }
        avg_salary = (double) total_salary / num_employees;
        for (int j = 0; j < comp[i].num_employees; j++) {
            if (comp[i].employees[j].salary < avg_salary) {
                printf("%s %s %s %d\n", comp[i].employees[j].name, comp[i].employees[j].embg, comp[i].employees[j].department, comp[i].employees[j].salary);
            }
        }
    }
}

void printHighestSalaryEmployee(Company *comp, int numCompanies, char *department) {
    printf("Employees with highest salaries for given department:\n");
    for (int i = 0; i < numCompanies; i++) {
        Employee highest_employee;
        int highest_salary = 0;
        for (int j = 0; j < comp[i].num_employees; j++) {
            if (strcmp(comp[i].employees[j].department, department) == 0 && comp[i].employees[j].salary > highest_salary) {
                highest_employee = comp[i].employees[j];
                highest_salary = comp[i].employees[j].salary;
            }
        }
        printf("%s %s %s %d\n", highest_employee.name, highest_employee.embg, highest_employee.department, highest_employee.salary);
    }
}

int main() {
    int numCompanies;
    scanf("%d", &numCompanies);
    Company companies[numCompanies];
    for (int i = 0; i < numCompanies; i++) {
        scanf("%s %d", companies[i].name, &companies[i].num_employees);
        for (int j = 0; j < companies[i].num_employees; j++) {
            scanf("%s %s %s %d", companies[i].employees[j].name, companies[i].employees[j].embg, companies[i].employees[j].department, &companies[i].employees[j].salary);
        }
    }
    char department[50];
    scanf("%s", department);
    printEmployeesBelowAverageSalary(companies, numCompanies);
    printHighestSalaryEmployee(companies, numCompanies, department);
    return 0;
}


--------------------------------------------------------------------------------------------------------------------


TOCNA VERZIJA BEZ DUPLIKATI PROSLITE BEA AKO ZADACATA BESE NE TOCNA



#include <iostream>
#include <cstring>

using namespace std;

// Employee structure
struct Employee {
    char name[100];
    char embg[100];
    char oddel[100];
    int plata;
};

// Company structure
struct Company {
    char name[100];
    Employee *employee;  // Use a pointer instead of a large array
    int numEmployees;
};

// Function to print employees with salaries below the average
void printEmployeesBelowAverageSalary(Company *comp, int numCompanies) {
    cout << "Employees with salaries below the average:" << endl;
    for (int i = 0; i < numCompanies; ++i) {
        double totalSalary = 0;

        // Calculate total salary
        for (int j = 0; j < comp[i].numEmployees; ++j) {
            totalSalary += comp[i].employee[j].plata;
        }

        // Calculate average salary
        double averageSalary = totalSalary / comp[i].numEmployees;

        // Print employees with salary below the average
        for (int j = 0; j < comp[i].numEmployees; ++j) {
            if (comp[i].employee[j].plata < averageSalary) {
                cout << comp[i].employee[j].name << " "
                     << comp[i].employee[j].embg << " "
                     << comp[i].employee[j].oddel << " "
                     << comp[i].employee[j].plata << endl;
            }
        }
    }
}

// Function to print the highest-paid employee in a given department
void printHighestSalaryEmployee(Company *comp, int numCompanies, char *department) {
    cout << "Employees with highest salaries for given department:" << endl;
    for (int i = 0; i < numCompanies; ++i) {
        Employee *highestPaidEmployee = nullptr;
        int highestSalary = -1;

        // Find highest-paid employee in the department
        for (int j = 0; j < comp[i].numEmployees; ++j) {
            if (strcmp(comp[i].employee[j].oddel, department) == 0 && 
                comp[i].employee[j].plata > highestSalary) {
                highestPaidEmployee = &comp[i].employee[j];
                highestSalary = comp[i].employee[j].plata;
            }
        }

        // Print the highest-paid employee if found
        if (highestPaidEmployee) {
            cout << highestPaidEmployee->name << " "
                 << highestPaidEmployee->embg << " "
                 << highestPaidEmployee->oddel << " "
                 << highestPaidEmployee->plata << endl;
        }
    }
}

int main() {
    int numCompanies;
    cin >> numCompanies;

    // Allocate memory for companies dynamically
    Company *companies = new Company[numCompanies];

    // Read company data
    for (int i = 0; i < numCompanies; ++i) {
        cin >> companies[i].name >> companies[i].numEmployees;
        
        // Allocate memory for employees dynamically
        companies[i].employee = new Employee[companies[i].numEmployees];

        for (int j = 0; j < companies[i].numEmployees; ++j) {
            cin >> companies[i].employee[j].name
                >> companies[i].employee[j].embg
                >> companies[i].employee[j].oddel
                >> companies[i].employee[j].plata;
        }
    }

    // Read the department name
    char department[100];
    cin >> department;

    // Function calls
    printEmployeesBelowAverageSalary(companies, numCompanies);
    printHighestSalaryEmployee(companies, numCompanies, department);

    // Free allocated memory
    for (int i = 0; i < numCompanies; ++i) {
        delete[] companies[i].employee;
    }
    delete[] companies;

    return 0;
}



Да се креира структура Engine во која што ќе се чуваат податоци за коњска сила / horsepower (int) и вртежен момент / torque (int).

Потоа, да се креира структура Car во која што ќе  се чуваат податоци името на производителот (char array) , која година е произведена колата (int) и кој мотор / engine (Engine) која што го користи/

На почетокот се внесува број N што озналува колку коли ќе се читаат од влез.

Да се направи функцијата:

void printCars(...)

која што ќе ги земе двете коли кои имаат најмала коњска сила, и од нив две, ќе ја испечати колата што има поголем вртежен момент.




#include <iostream>
#include <cstring>

using namespace std;

struct Engine {
    int horsepower;
    int torque;
};

struct Car {
    char Proizvod[100];
    int godina;
    Engine engine;
};

void printCars(Car cars[], int n) {
  if(n<2){
      cout<<"NEMA KOLI >:(((((((("<<endl;
      return;
  }

      int min1=0, min2=-1;
      for (int i = 0; i < n; ++i) {
        if(cars[i].engine.horsepower<cars[min1].engine.horsepower){
            min2=min1;
            min1=i;
        } else if(min2==-1||cars[i].engine.horsepower<cars[min2].engine.horsepower){
            min2=i;
        }
      }

      int selectedIndex;
      if(cars[min1].engine.torque>=cars[min2].engine.torque){
          selectedIndex=min1;
      } else{
          selectedIndex=min2;
      }

      cout<<cars[selectedIndex].Proizvod<<" "<<cars[selectedIndex].godina<<" "
      <<cars[selectedIndex].engine.horsepower<<" "<<cars[selectedIndex].engine.torque<<endl;





}

int main() {
    Car c[100];
    int n;
    cin >> n;

    for (int i = 0; i < n; ++i) {
        cin >> c[i].Proizvod >> c[i].godina >> c[i].engine.horsepower >> c[i].engine.torque;
    }

    printCars(c, n);
    return 0;
}



Да се креира класа BasketballPlayer која ќе ги чува следните информации:

    име на кошаркарот (низа од знаци не подолга од 20 карактери)
    презиме на кошаркарот (низа од знаци не подолга од 20 карактери)
    број на дрес (цел број)
    поени од прв натпревар (цел број)
    поени од втор натпревар (цел број)
    поени од трет натпревар (цел број)

Да се направат потребните методи за класата, како и метод за печатење на информации за кошаркарот во следен формат "Player: name surname with number: number has avg_pts points on average".

Од стандарден влез се внесуваат име, презиме, број на дрес и поени за сите три натпревари за еден кошаркар.

На стандарден излез се печатат информациите за кошаркарот.


#include <iostream>
#include <cstring>
#include <cctype>
#include <cmath>
#include <fstream>
using namespace std;
class BasketballPlayer {
    char name[20];
    char surname[20];
    int shirt_number;
    int points_1;
    int points_2;
    int points_3;
public:
    BasketballPlayer(char *namee="", char *surnamee="", int shirt_numberr=0, int points_11=0, int points_22=0, int points_33=0) {
        strcpy(name, namee);
        strcpy(surname, surnamee);
        this->shirt_number = shirt_numberr;
        this->points_1 = points_11;
        this->points_2 = points_22;
        this->points_3 = points_33;
    }
    char* getName() {
        return name;
    }
    char* getSurname() {
        return surname;
    }
    int getShirtNumber() {
        return shirt_number;
    }
    int getPoints1() {
        return points_1;
    }
    int getPoints2() {
        return points_2;
    }
    int getPoints3() {
        return points_3;
    }
    void setName(char *namee) {
        strcpy(name, namee);
    }
    void setSurname(char *surnamee) {
        strcpy(surname, surnamee);
    }
    void setShirtNumber(int shirt_numberr) {
        this->shirt_number = shirt_numberr;
    }
    void setPoints1(int points_11) {
        this->points_1 = points_11;
    }
    void setPoints2(int points_22) {
        this->points_2 = points_22;
    }
    void setPoints3(int points_33) {
        this->points_3 = points_33;
    }
    double avg_pts() {
        return (points_1 + points_2 + points_3) / 3;
    }
    void print() {
        cout<<"Player: "<<name<<" "<<surname<<" with number: "<<shirt_number<<" has "<<avg_pts()<<" points on average"<<endl;
    }
};
int main() {
    char name[20];
    char surname[20];
    int shirt_number;
    int points_1;
    int points_2;
    int points_3;
    cin>>name>>surname>>shirt_number>>points_1>>points_2>>points_3;
    BasketballPlayer basketballPlayer(name, surname, shirt_number, points_1, points_2, points_3);
    basketballPlayer.print();
    return 0;
}





Да се дефинира класа Country во која ќе се чуваат информации за:

    name(низа од максимум 100 карактери) име на државата

    capital(низа од максимум 100 карактери) главен град

    area(децимален број) - површина во илјада km2

    population(децимален број) - популација во милиони.

Сите променливи внатре во класата треба да бидат приватни. Соодветно во рамките на класата да се дефинираат:

    конструктор (без и со параметри)

    деструктор

    set методи

    get методи

Да се дефинираат следните методи во класата:

    display() која што ќе ги печати информациите за сметката во следниот формат:

Country: Guyana

Capital: Georgetown

Area: 214

Population: 0.8

Надвор од класата:

    sortCountries(Country *countries, int n) која што ќе ги сортира државите растечки по нивната површина.

ДА НЕ СЕ МЕНУВА MAIN ФУНКЦИЈАТА.

int main() {
    int n;
    cin >> n;
    Country countries[100];

    char name[100];
    char capital[100];
    float area;
    float population;

    for (int i = 0; i < n-1; i++)  {
        cin>>name;
        cin >> capital;
        cin >> area;
        cin>>population;

        // testing constructor with arguments
        countries[i] = Country(name, capital, area, population);

    }


    // testing set methods and display for last element
    cin>>name;
    cin >> capital;
    cin >> area;
    cin>>population;
    countries[n-1].setName(name);
    countries[n-1].setCapital(capital);
    countries[n-1].setArea(area);
    countries[n-1].setPopulation(population);

    cout<<"-->Testing set methods and display()"<<endl;
    countries[n-1].display();
    cout<<endl;

    cout<<"-->Testing sortCountries()"<<endl;
    sortCountries(countries,n);
    return 0;
}







#include <iostream>
#include <iomanip>
#include <cmath>
#include <string>
#include <cstring>

using namespace std;


class Country{
private:
    char name[100];
    char capital[100];
    float area;
    float population;
public:
    Country(char *name="lol", char *capital="lmao", float area=0, float population=0)  {
        ::strcpy(this->name,name);
        ::strcpy(this->capital,capital);
        this->area=area;
        this->population=population;
    }

    const char *getName() const {
        return name;
    }

    void setName(char *name){
        ::strcpy(this->name, name);
    }

    const char *getCapital() const {
        return capital;
    }
    void setCapital(char *capital){
        ::strcpy(this->capital, capital);
    }

    float getArea() const {
        return area;
    }

    void setArea(float area) {
        Country::area = area;
    }

    float getPopulation() const {
        return population;
    }

    void setPopulation(float population) {
        Country::population = population;
    }


    void display(){
        cout<<"Country: "<<getName()<<endl;
        cout<<"Capital: "<<getCapital()<<endl;
        cout<<"Area: "<<getArea()<<endl;
        cout<<"Population: "<<getPopulation()<<endl;
    }


};


void sortCountries(Country *countries, int n){



    for (int i = 0; i < n-1; ++i) {
        for (int j = 0; j < n-1-i; ++j) {
            if(countries[j].getArea()<countries[j+1].getArea()){
                swap(countries[j],countries[j+1]);
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        countries[i].display();
        cout<<endl;
    }
}

int main() {
    int n;
    cin >> n;
    Country countries[100];

    char name[100];
    char capital[100];
    float area;
    float population;

    for (int i = 0; i < n-1; i++)  {
        cin>>name;
        cin >> capital;
        cin >> area;
        cin>>population;

        // testing constructor with arguments
        countries[i] = Country(name, capital, area, population);

    }


    // testing set methods and display for last element
    cin>>name;
    cin >> capital;
    cin >> area;
    cin>>population;
    countries[n-1].setName(name);
    countries[n-1].setCapital(capital);
    countries[n-1].setArea(area);
    countries[n-1].setPopulation(population);

    cout<<"-->Testing set methods and display()"<<endl;
    countries[n-1].display();
    cout<<endl;

    cout<<"-->Testing sortCountries()"<<endl;
    sortCountries(countries,n);
    return 0;
}





Да се креира структура Student во која се чуваат податоци за еден студент. За студентот се чуваат информации за името на студентот(низа од карактери), 
број на индекс на студентот, 
број на курсеви кои ги слуша, низа од кодови на курсевите кои ги слуша.

Потоа, да се креира структура Course во која се чуваат податоци за името на курсот (низа од карактери), 
код на курсот(цел број) и број на студенти кои го слушаат.

Да се направи функција:

int get_most_popular_course(struct course courses[], int num_courses)
кoja што го враќа кодот на најпопуларниот курс.
Напомена: Прво од тастатура се чита бројот на студенти, потоа бројот на курсеви. 
Потоа се внесуваат курсевите и студентите, притоа за секој студент се читаат и кодовите на курсевите кои ги слуша.
 Tretata :
Да се дефинира класа Programmer во која ќе се чуваат информации за:

name (низа од максимум 100 карактери) - име на вработениот

programmingLanguage (низа од максимум 100 карактери) - омилен програмски јазик на вработениот

salary (цел број) - плата на вработениот

Сите променливи внатре во класата треба да бидат приватни. Соодветно во рамките на класата да се дефинираат:

конструктор (без и со параметри)

деструктор

set методи

get методи
Да се дефинираат следните методи во класата:

display() која што ќе ги печати информациите за програмерот во следниот формат:

Name: …

Programming language: …

Salary: …

Надвор од класата:

printProgrammerWithHighestSalary(Programmer programmers, int n, charlang) кој што ќе го најде програмерот со најголема плата, 
чиј што омилен програмски јазик е оној кој што се предава како аргумент во функцијата.

ДА НЕ СЕ МЕНУВА MAIN ФУНКЦИЈАТА

#include <iostream>

using namespace std;

struct Student {
    char ime[100];
    char indeks[20];
    int kodovi[20];
    int kolkuKursevi;
};

struct Course {
    char ime[100];
    int kod;
    int brStudenti;
};

int najPopularen(Course *courses, int num) {
    int ind = -1, maxS = -1;

    for (int i = 0; i < num; i++) {
        if (courses[i].brStudenti > maxS) {
            maxS = courses[i].brStudenti;
            ind = i;
        }
    }

    return ind;
}

int main() {
    int n, t;
    cin >> n >> t;

    Course kursevi[20];
    Student studenti[20];

    for (int i = 0; i < t; i++) {
        cin >> kursevi[i].ime >> kursevi[i].kod;
        kursevi[i].brStudenti = 0;
    }

    for (int i = 0; i < n; i++) {
        cin >> studenti[i].ime >> studenti[i].indeks >> studenti[i].kolkuKursevi;
        for (int j = 0; j < studenti[i].kolkuKursevi; j++) {
            cin >> studenti[i].kodovi[j];
            for (int k = 0; k < t; k++) {
                if (studenti[i].kodovi[j] == kursevi[k].kod)
                    kursevi[k].brStudenti++;
            }
        }
    }

    int ind = najPopularen(kursevi, t);

    cout << "Najpopularen kurs e: " << kursevi[ind].ime;

    return 0;
}
