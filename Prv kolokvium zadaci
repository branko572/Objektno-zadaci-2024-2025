Task 1: Library Management System
Define classes for a simple library system:

Book class with:

title (char array)

author (char array)

ISBN (char array)

availableCopies (int)

totalBooks (static int)

Constructors and methods to display book info

Static method to get total book count

Library class with:

name (char array)

books (array of Book objects)

bookCount (int)

Methods to add/remove books

Method to display all books

External function findBooksByAuthor() that searches and displays books by a given author



#include <iostream>
#include <cstring>
using namespace std;

class Book {
private:
    char title[100];
    char author[100];
    char isbn[100];
    int availableCopies;
    static int totalBooks;
public:
    Book(const char *title="", const char *author="", const char *isbn="", int availableCopies=0) {
        strncpy(this->title, title, 99);
        this->title[99] = '\0';
        strncpy(this->author, author, 99);
        this->author[99] = '\0';
        strncpy(this->isbn, isbn, 99);
        this->isbn[99] = '\0';
        this->availableCopies = availableCopies;
        totalBooks++;
    }

    Book(const Book& other) {
        strcpy(this->title, other.title);
        strcpy(this->author, other.author);
        strcpy(this->isbn, other.isbn);
        this->availableCopies = other.availableCopies;
        totalBooks++;
    }

    const char *getTitle() const {
        return title;
    }

    const char *getAuthor() const {
        return author;
    }

    const char *getIsbn() const {
        return isbn;
    }

    int getAvailableCopies() const {
        return availableCopies;
    }

    void setAvailableCopies(int availableCopies) {
        this->availableCopies = availableCopies;
    }

    static int getTotalBooks() {
        return totalBooks;
    }

    void display() const {
        cout << "Title: " << title << "\nAuthor: " << author
             << "\nISBN: " << isbn << "\nAvailable copies: "
             << availableCopies << "\n";
    }

    ~Book() {
        totalBooks--;
    }
};

int Book::totalBooks = 0;

class Library {
private:
    char name[100];
    Book books[100];
    int bookCount;
public:
    Library(const char *name="") {
        strncpy(this->name, name, 99);
        this->name[99] = '\0';
        this->bookCount = 0;
    }

    const char *getName() const {
        return name;
    }

    const Book *getBooks() const {
        return books;
    }

    int getBookCount() const {
        return bookCount;
    }

    void addBook(const Book &other) {
        if(bookCount < 100) {
            books[bookCount++] = other;
        }
    }

    bool removeBook(const char* isbn) {
        for (int i = 0; i < bookCount; ++i) {
            if(strcmp(books[i].getIsbn(), isbn) == 0) {
                for (int j = i; j < bookCount-1; ++j) {
                    books[j] = books[j+1];
                }
                bookCount--;
                return true;
            }
        }
        return false;
    }

    void displayAllBooks() const {
        cout << "Library: " << name << "\n";
        cout << "Total books: " << bookCount << "\n\n";
        for (int i = 0; i < bookCount; ++i) {
            books[i].display();
            cout << endl;
        }
    }

    ~Library() {}
};

void findBooksByAuthor(const Library &library, const char *author) {
    cout << "Books by " << author << ":\n";
    bool found = false;
    for (int i = 0; i < library.getBookCount(); ++i) {
        if(strcmp(library.getBooks()[i].getAuthor(), author) == 0) {
            library.getBooks()[i].display();
            found = true;
            cout << endl;
        }
    }
    if(!found) {
        cout << "No books found by this author.\n";
    }
}

int main() {
    Library l("City Public Library");

    Book book1("1984", "George Orwell", "978-0451524935", 5);
    Book book2("Animal Farm", "George Orwell", "978-0451526342", 3);
    Book book3("To Kill a Mockingbird", "Harper Lee", "978-0446310789", 2);
    Book book4("The Great Gatsby", "F. Scott Fitzgerald", "978-0743273565", 4);

    l.addBook(book1);
    l.addBook(book2);
    l.addBook(book3);
    l.addBook(book4);

    // Display all books
    cout << "--- All Books in Library ---\n";
    l.displayAllBooks();

    // Find books by author
    cout << "--- Books by George Orwell ---\n";
    findBooksByAuthor(l, "George Orwell");

    // Remove a book
    cout << "--- Removing a Book ---\n";
    if (l.removeBook("978-0451526342")) {
        cout << "Book removed successfully.\n";
    } else {
        cout << "Book not found.\n";
    }

    // Display updated list
    cout << "\n--- Updated Book List ---\n";
    l.displayAllBooks();

    // Show total books in system
    cout << "Total books in system: " << Book::getTotalBooks() << endl;

    return 0;
}


Задача 1
Да се дефинира класа SMS, во која ќе се чуваат информации за датумот на пораката (објект од класа Date), содржина на пораката (низа од 150 карактери) и два телефонски броја (текстуални низи од 10 цифри за број кој испраќа и број кој прима). (10 поени) Класата Date треба да содржи три цели броеви за ден, месец и година. (5 поени)

Да се напише main функција во која се чита цел броj N (max 500), a потоа информации за N пораки. Читањето на една порака е во следниот формат:

dd mm yyyy број_што_праќа број_што_прима содржина. (10 поени)

Потоа, треба да се прочита уште еден датум кој означува почеток на временскиот период од тој датум до денес.

Пример влез:

18 03 2016 070211123 071300400 I'll call you back

.... пораки

18 12 2017 070211123 071300400 hahah

11 11 2015

На екран да се испечатат сите пораки кои се пократки од 70 карактери и се направени после внесен датум (не вклучувајќи ги и пораките направени на самиот тој датум). Да се искористи посебна функција која како аргументи прима: низа од објекти од класата SMS, големина на низата со пораки (цел број) и датум (објект од класата Date) кој означува почеток на временскиот период. Доколку не постојат пораки со бараниот услов, да се испечати соодветна порака (15 поени).

Форматот на печатење да се види од тест примерите.

ПОМОШ: Да се вклучи библиотеката #include за датумите да се испечатат со наредбата cout << setfill('0') << setw(2) << day << "/" << setfill('0') << setw(2) << month << "/" << year
Define the class SMS, where information about the message date (an object of the Date class), message content (an array of 150 characters), and two phone numbers (textual arrays of 10 digits for the sender and the receiver) are stored.

The Date class should contain three integers for day, month, and year. (5 points)

Write a main function in which an integer N (max 500) is read, followed by information for N messages. Reading a single message is in the following format:

dd mm yyyy

sender_number

receiver_number

content. (10 points)

Then, another date should be read, indicating the start of the time period from that date until today.

Example input:

18 03 2016

070211123

071300400

I'll call you back

.... messages

18 12 2017

070211123

071300400

hahah

11 11 2015

Print all messages shorter than 70 characters made after the entered date (excluding messages on that exact date). Use a separate function that takes as arguments: an array of objects of the SMS class, the size of the message array (an integer), and a date (an object of the Date class) indicating the start of the time period. If there are no messages meeting the specified conditions, print an appropriate message. (15 points)

The printing format should be seen from the test examples.

HINT: Include the library #include to print dates using the command

cout << setfill('0') << setw(2) << day << "/" << setfill('0') << setw(2) << month << "/" << year


#include <iostream>
#include <iomanip>
#include <cstring>

using namespace std;

class Date {
private:
    int d, m, y;
public:
    Date(int d = 1, int m = 1, int y = 1900) : d(d), m(m), y(y) {}

    Date(const Date &other) : d(other.d), m(other.m), y(other.y) {}

    int getD() const { return d; }
    int getM() const { return m; }
    int getY() const { return y; }

    void print() const {
        cout << setfill('0') << setw(2) << d << "/"
             << setfill('0') << setw(2) << m << "/" << y;
    }

    bool isAfter(const Date& other) const {
        if (y > other.y) return true;
        if (y < other.y) return false;
        if (m > other.m) return true;
        if (m < other.m) return false;
        return d > other.d;
    }

    ~Date() {}
};

class SMS {
private:
    Date date;
    char content[151];
    char sender[11];  // 10 digits + null terminator
    char receiver[11]; // 10 digits + null terminator
public:
    SMS(const Date &date = Date(), const char* content = "",
        const char* sender = "", const char* receiver = "") : date(date) {
        strncpy(this->content, content, 150);
        this->content[150] = '\0';
        strncpy(this->sender, sender, 10);
        this->sender[10] = '\0';
        strncpy(this->receiver, receiver, 10);
        this->receiver[10] = '\0';
    }

    const Date& getDate() const { return date; }
    const char* getContent() const { return content; }
    const char* getSender() const { return sender; }
    const char* getReceiver() const { return receiver; }

    int getContentLength() const { return strlen(content); }

    void print() const {
        date.print();
        cout << " " << sender << " " << receiver << " " << content << endl;
    }

    ~SMS() {}
};

void printFilteredMessages(SMS messages[], int n, const Date& startDate) {
    bool found = false;
    for (int i = 0; i < n; i++) {
        if (messages[i].getContentLength() < 70 &&
            messages[i].getDate().isAfter(startDate)) {
            messages[i].print();
            found = true;
        }
    }
    if (!found) {
        cout << "No messages found matching the criteria." << endl;
    }
}

int main() {
    int n;
    cin >> n;
    if (n > 500 || n <= 0) {
        cout << "Invalid number of messages." << endl;
        return 0;
    }

    SMS messages[500];

    for (int i = 0; i < n; i++) {
        int d, m, y;
        char sender[11], receiver[11], content[151];

        cin >> d >> m >> y >> sender >> receiver;
        cin.ignore(); // Ignore the space before content
        cin.getline(content, 150);

        Date date(d, m, y);
        messages[i] = SMS(date, content, sender, receiver);
    }

    int d, m, y;
    cin >> d >> m >> y;
    Date filterDate(d, m, y);

    printFilteredMessages(messages, n, filterDate);

    return 0;
}



Задача 2
Да се дефинира класа Book, која репрезентира една книга. За класата Book се чуваат:

Наслов (текстуална низа од 30 знаци)

Сериски број (цел број)

Тип на книга (енумерациски тип, стручна литература или роман)

Цена (децимален број)

Серискиот број е единствен за секоја книга, неговата почетна вредност е 777550. Да се обезбеди секвенцијално генерирање на овој број, така што првата книга ќе има сериски број 777551, втората 777552, третата 777553 итн. (5 поени)

За оваа класа да се обезбедат потребните конструктори и set/get методи. (5 поени)

Да се имплементира метод print() со кој ќе се печатат информациите за секој објект во формат: [сериски број] - [наслов] [тип] [цена] (5 поени)

Да се имплементира метод increasePrice(float) кој како аргумент ќе прима реален број, што ќе претставува износ кој се додава на цената на книгата. (5 поени)

Потоа да се дефинира класа BookStore, во која се чуваат информации за:

Име (текстуална низа од 20 знаци)

Листа од книги (обична низа со максимум 100 објекти од класата Book)

Број на книги (број на елементи во низата од книги, иницијално е 0)

За оваа класа да се дефинираат потребните конструктори, деструктор (ако е потребен), set и get методи. (5 поени)

Да се имплементира метод print() во формат: [име] и потоа сите книги поединечно (види форматот од методот Book::print). (5 поени)

Да се имплементира метод addBook(const Book&) за додавање нова книга во продавницата. Книгите се менаџираат според нивниот наслов, односно не смее да се дозволи додавање книга со ист наслов повеќе од еднаш. (10 поени)

Да се дефинира метод greaterThan(const BookStore&) кој ќе споредува дали едната продавница има повеќе книги од другата. (5 поени)

Да се дефинира метод void createMarketPrice() - со кој продавницата генерира продажни цени на сите книги. Продажните цени се пресметуваат во зависност од тоа за каков тип на литература станува збор:

За стручна литература се додава 5% на цената

За романи се додава 3% (10 поени)

Да се дефинира глобална функција best() - која прима низа од објекти од класатa BookStore и бројот на продавници, а ја враќа онаа продавница која има најмногу книги. Доколку повеќе продавници имаат ист број на книги, се враќа првата најдена. (5 поени)

Define the class Book, which represents a single book. The class holds the following attributes:

title – a textual array of up to 30 characters

id – serial number (integer)

type – enumerated type representing the book type: academic or roman

price – decimal number

The serial number is unique for each book. The initial value is 777550. Ensure sequential generation of this number, so that the first book has serial number 777551, the second 777552, the third 777553, etc. (5 points)

Provide the necessary constructors and set/get methods. (5 points)

Implement a method print() which prints the information in the following format: [serial number] - [title] [type] [price] (5 points)

Implement a method increasePrice(float) that takes a real number representing the margin, and adds it to the book's price. (5 points)

Then define the class BookStore, which stores information about:

Name (textual array of up to 20 characters)

List of books (regular array of up to 100 Book objects)

Number of books (number of elements in the array, initially 0)

Define the necessary constructors, destructor (if needed), and set/get methods. (5 points)

Implement a method print() in the following format: [name] and then all books printed individually (see format from the Book::print method). (5 points)

Implement a method addBook(const Book&) to add a new book to the store. Books are managed based on their title, and adding a book with an already existing title is not allowed. (10 points)

Define a method greaterThan(const BookStore&) to compare two stores by the number of books. (5 points)

Define a method void createMarketPrice() that generates selling prices for all books in the store. The selling prices depend on the book type:

For academic literature, 5% is added to the price

For romans, 3% is added (10 points)

Define a global function best() that takes an array of BookStore objects and the number of stores, and returns the store with the most books. If multiple stores have the same number of books, the first one is returned. (5 points)



POTOCNA VERZIJA:

#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstring>


using namespace std;

//Да се дефинира класа Book, која репрезентира една книга. За класата Book се чуваат:
//
//Наслов (текстуална низа од 30 знаци)
//
//Сериски број (цел број)
//
//Тип на книга (енумерациски тип, стручна литература или роман)
//
//Цена (децимален број)

enum Type{
    academic,novel
};


class Book{
private:

//    Серискиот број е единствен за секоја книга, неговата почетна вредност е 777550.
//    Да се обезбеди секвенцијално генерирање на овој број, така што првата книга ќе има сериски број 777551, втората 777552, третата 777553 итн. (5 поени)
    char title[30];
    int serial;
    Type type;
    float price;
    static int OBJECT;
public:
    Book(){
        ::strcpy(title,"w");
        serial=0;
        type=novel;
        price=0;
    }


    Book(const char *title, Type type, double price)  {
        ::strcpy(this->title,title);
        this->serial=777550+OBJECT;
        this->type=type;
        this->price=price;
        OBJECT++;
    }

//    За оваа класа да се обезбедат потребните конструктори и set/get методи. (5 поени)

    const char *getTitle() const {
        return title;
    }

    int getSerial() const {
        return serial;
    }

    void setSerial(int serial) {
        this->serial = serial;
    }


    Type getType() const {
        return type;
    }

    void setType(Type type) {
        Book::type = type;
    }

    double getPrice() const {
        return price;
    }

    void setPrice(float price) {
        Book::price = price;
    }

    static int getObject() {
        return OBJECT;
    }

    static void setObject(int object) {
        OBJECT = object;
    }


    void print() const{
        cout<<serial<<" - "<<title<<" ";
        if(type==academic){
            cout<<"academic"<<" ";
        } else{
            cout<<"novel"<<" ";
        }
        cout<<price<<endl;

    }

//    Да се имплементира метод print() со кој ќе се печатат информациите за секој објект во формат: [сериски број] - [наслов] [тип] [цена] (5 поени)

    void increasePrice(float amount) {
        price += amount;
    }

};


int Book::OBJECT=0;

//Потоа да се дефинира класа BookStore, во која се чуваат информации за:

class BookStore{
private:
//Име (текстуална низа од 20 знаци)
//Листа од книги (обична низа со максимум 100 објекти од класата Book)
//Број на книги (број на елементи во низата од книги, иницијално е 0)
    Book books[100];
    int numBooks;
    char name[20];
public:
    BookStore(){
        ::strcpy(name,"w");
        numBooks=0;
    }
    BookStore(const char *name)  {
        ::strcpy(this->name,name);
        this->numBooks=0;
    }

//За оваа класа да се дефинираат потребните конструктори, деструктор (ако е потребен), set и get методи. (5 поени)


    const Book *getBooks() const {
        return books;
    }

    int getNumBooks() const {
        return numBooks;
    }

    void setNumBooks(int numBooks) {
        BookStore::numBooks = numBooks;
    }

    const char *getName() const {
        return name;
    }

//Да се имплементира метод print() во формат: [име] и потоа сите книги поединечно (види форматот од методот Book::print). (5 поени)

    void print() {
        cout << name << endl;
        for (int i = 0; i < numBooks; ++i) {
            books[i].print();
        }
    }



    //    Да се имплементира метод addBook(const Book&) за додавање нова книга во продавницата.
//    Книгите се менаџираат според нивниот наслов, односно не смее да се дозволи додавање книга со ист наслов повеќе од еднаш. (10 поени)
   void addBook(const Book& book){
        for (int i = 0; i < numBooks; ++i) {
           if(::strcmp(books[i].getTitle(),book.getTitle())==0){
               return;
           }
       }
        if(numBooks<100){
            books[numBooks++]=book;
        }
    }

    //    Да се дефинира метод greaterThan(const BookStore&) кој ќе споредува дали едната продавница има повеќе книги од другата. (5 поени)
    bool greaterThan(const BookStore& other){
        if(numBooks>other.numBooks){
            return true;
        }else{
           return false;
        }
    }

//    Да се дефинира метод void createMarketPrice() - со кој продавницата генерира продажни цени на сите книги.
//    Продажните цени се пресметуваат во зависност од тоа за каков тип на литература станува збор:

    void createMarketPrice() {
        for (int i = 0; i < numBooks; ++i) {
            if (books[i].getType() == academic) {
                books[i].increasePrice(books[i].getPrice() * 0.05);
            } else if (books[i].getType() == novel) {
                books[i].increasePrice(books[i].getPrice() * 0.03);
            }
        }
    }
};

//Да се дефинира глобална функција best() - која прима низа од објекти од класатa BookStore и бројот на продавници,
//а ја враќа онаа продавница која има најмногу книги.
//Доколку повеќе продавници имаат ист број на книги, се враќа првата најдена. (5 поени)

BookStore best(BookStore books[], int n) {
    int index = -1;
    int max = -1;
    bool isDuplicate = false;

    for (int i = 0; i < n; ++i) {
        isDuplicate = false;

        for (int j = 0; j < i; ++j) {
            if (strcmp(books[i].getName(), books[j].getName()) == 0) {
                isDuplicate = true;
                break;
            }
        }

        if (isDuplicate) {
            continue;
        }

        if (books[i].getNumBooks() > max) {
            max = books[i].getNumBooks();
            index = i;
        }
    }

    if (index == -1) {
        // No bookstore found
        throw std::runtime_error("No bookstore found.");
    }

    return books[index];
}


int main() {
    // Create some books
    Book b1("C++ Programming", academic, 1000);
    Book b2("The Great Gatsby", novel, 500);
    Book b3("Linear Algebra", academic, 800);
    Book b4("1984", novel, 400);
    Book b5("The Great Gatsby", novel, 550); // Duplicate title

    // Create bookstores
    BookStore s1("CityBooks");
    BookStore s2("EduReads");

    // Add books to bookstore s1
    s1.addBook(b1);
    s1.addBook(b2);
    s1.addBook(b5); // Should not be added (duplicate title)

    // Add books to bookstore s2
    s2.addBook(b3);
    s2.addBook(b4);

    // Print bookstores before market price update
    cout << "--- BEFORE PRICE UPDATE ---" << endl;
    s1.print();
    s2.print();

    // Apply market prices
    s1.createMarketPrice();
    s2.createMarketPrice();

    // Print bookstores after price update
    cout << "\n--- AFTER PRICE UPDATE ---" << endl;
    s1.print();
    s2.print();

    // Compare bookstores
    cout << "\n--- COMPARISON ---" << endl;
    if (s1.greaterThan(s2)) {
        cout << s1.getName() << " has more books than " << s2.getName() << endl;
    } else {
        cout << s2.getName() << " has more or equal books than " << s1.getName() << endl;
    }

    // Create an array of bookstores (including a duplicate name)
    BookStore stores[3] = {s1, s2, BookStore("CityBooks")}; // Third one is duplicate name

    // Find the best bookstore
    cout << "\n--- BEST BOOKSTORE ---" << endl;
    BookStore bestStore = best(stores, 3);
    bestStore.print();

    return 0;
}










-----------------------------

#include <iostream>
#include <cstring>
using namespace std;

enum Type { academic, novel };

class Book {
private:
    char title[30];
    int serial;
    Type type;
    double price;
    static int object;
public:
    Book(const char *title = "w", Type type = academic, double price = 0) {
        strcpy(this->title, title);
        this->type = type;
        this->serial = 777550 + object;
        this->price = price;
        object++;
    }

    const char* getTitle() const {
        return title;
    }

    int getSerial() const {
        return serial;
    }

    Type getType() const {
        return type;
    }

    double getPrice() const {
        return price;
    }

    void setPrice(double price) {
        this->price = price;
    }

    void increasePrice(float amount) {
        price += amount;
    }

    void print() const {
        cout << serial << " - " << title << " ";
        cout << (type == academic ? "academic " : "novel ") << price << endl;
    }
};

int Book::object = 0;

class BookStore {
private:
    char name[20];
    Book books[100];
    int n;
public:
    BookStore(const char *name) {
        this->n = 0;
        strcpy(this->name, name);
    }

    void addBook(const Book& other) {
        // Check for duplicate title
        for (int i = 0; i < n; i++) {
            if (strcmp(books[i].getTitle(), other.getTitle()) == 0) {
                return; // Don't add duplicate titles
            }
        }
        if (n < 100) {
            books[n++] = other;
        }
    }

    int getN() const {
        return n;
    }

    bool greaterThan(const BookStore& other) const {
        return n > other.n;
    }

    void createMarketPrice() {
        for (int i = 0; i < n; i++) {
            if (books[i].getType() == academic) {
                books[i].setPrice(books[i].getPrice() * 1.05);
            } else if (books[i].getType() == novel) {
                books[i].setPrice(books[i].getPrice() * 1.03);
            }
        }
    }

    void print() const {
        cout << name << endl;
        for (int i = 0; i < n; i++) {
            books[i].print();
        }
    }
};

BookStore best(BookStore stores[], int numStores) {
    if (numStores == 0) return stores[0]; // Assuming there's at least one store

    BookStore *bestStore = &stores[0]; // Start with first store

    for (int i = 1; i < numStores; i++) {
        if (stores[i].getN() > bestStore->getN()) {
            bestStore = &stores[i];
        }
    }

    return *bestStore; // Return the store with most books
}

int main() {
    // Create bookstores
    BookStore storeA("Tech Library");
    BookStore storeB("Novel Store");

    // Add books to storeA
    storeA.addBook(Book("C++ Programming", academic, 100.00));
    storeA.addBook(Book("Data Structures", academic, 120.00));

    // Add books to storeB
    storeB.addBook(Book("Harry Potter", novel, 50.00));
    storeB.addBook(Book("The Hobbit", novel, 40.00));
    storeB.addBook(Book("Dune", novel, 70.00));

    cout << "Before applying price increase:\n";
    storeA.print();
    storeB.print();

    // Use increasePrice for a specific book
    storeA.createMarketPrice();  // Apply market price
    storeB.createMarketPrice();  // Apply market price

    // Increase price of specific book in storeA
    storeA.addBook(Book("Advanced C++", academic, 200.00));
    storeA.addBook(Book("Python Programming", academic, 150.00));

    cout << "\nAfter market price adjustments:\n";
    storeA.print();
    storeB.print();

    // Compare stores by number of books
    if (storeA.greaterThan(storeB)) {
        cout << "\nStore A has more books than Store B.\n";
    } else {
        cout << "\nStore B has more books than Store A.\n";
    }

    // Find the best store with the most books
    BookStore stores[] = {storeA, storeB};
    BookStore bestStore = best(stores, 2);

    cout << "\nThe best store is:\n";
    bestStore.print();

    return 0;
}
