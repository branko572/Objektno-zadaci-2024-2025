/*
Да се дефинира класата Kvadrat во која што се чува информација за:

должината на страната а на квадратот (double)
За класата да се дефинираат:

default конструктор
конструктор со аргументи
copy конструктор
double perimetar () што пресметува периметар на квадратот
double plostina () што пресметува плоштина на квадратот
void pecati () што печати информации за квадратот како во тест примерите
Да се имплементира класа Pravoagolnik што наследува од класата Kvadrat. Во неа се чуваат дополнителни информации за:

проширувањето x на двете паралелни страни на квадратот (double)
проширувањето у на другите две паралелни страни (double)
Правоаголникот всушност сега ќе има 2 страни со должина a+x и две страни со должина a+y.

За класата да се дефинираат:

default конструктор
конструктор Pravoagolnik (const Kvadrat &k, double x, double y)
copy конструктор
Да се препокријат трите методи дефинирани погоре за класата Kvadrat.

Напомени:

Ако x и y се исти, тогаш формата не е правоаголник туку е повторно квадрат. Во тој случај pecati() се повикува исто како за квадрат.
При препокривање на методите во класата Pravoagolnik мора да има повик кон истоимените методи од класата Kvadrat
*/



#include <iostream>
#include <iomanip>
#include <cstring>
#include <cmath>
#include <cctype>

using namespace std;

//Да се дефинира класата Kvadrat во која што се чува информација за:
//
//должината на страната а на квадратот (double)

class Kvadrat{
protected:
    double length;
    void copyKvadrat(const Kvadrat &k){
        this->length=k.length;
    }
public:
    Kvadrat(){
        length=0;
    }

    Kvadrat(double length){
        this->length=length;
    }
    Kvadrat(const Kvadrat &k){
        copyKvadrat(k);
    }

    double perimetar(){
        return length*4;
    }

  double plostina(){
        return length*length;
    }

    void pecati(){
        cout<<"Length: "<<length<<" Perimeter: "<<perimetar()<<" Area: "<<plostina()<<endl;
    }


    ~Kvadrat(){}

//    должината на страната а на квадратот (double)
//    За класата да се дефинираат:
//
//    default конструктор
//            конструктор со аргументи
//    copy конструктор
//    double perimetar () што пресметува периметар на квадратот
//    double plostina () што пресметува плоштина на квадратот
//    void pecati () што печати информации за квадратот како во тест примерите
//            Да се имплементира класа Pravoagolnik што наследува од класата Kvadrat. Во неа се чуваат дополнителни информации за:

};

//проширувањето x на двете паралелни страни на квадратот (double)
//проширувањето у на другите две паралелни страни (double)


class Pravoagolnik :public Kvadrat{
private:
    double x,y;
   void copyPravoagolnik(const Pravoagolnik &p){
        this->x=p.x;
        this->y=p.y;
    }
public:
    Pravoagolnik(){
        x=0;
        y=0;
    }
    Pravoagolnik(const Kvadrat &k, double x, double y):Kvadrat(length){
        this->x=x;
        this->y=y;
    }



    //Правоаголникот всушност сега ќе има 2 страни со должина a+x и две страни со должина a+y

    double perimetar(){
       if(x==y){
           length+=x;
           return Kvadrat::perimetar();
       } else{
           return 2 * (x + length) + 2 * (y + length);
       }
   }

   double plostina(){
       if(x==y){
           length+=x;
           return Kvadrat::plostina();
       } else{
           return (x + length) * (y + length);
       }
   }

   void pecati(){
       if (x == y)
       {
           length += x;
           Kvadrat::pecati();
       }
       else
       {
           cout << "Pravoagolnik so strani: " << length + x << " i " << length + y << " ima plostina P=" << plostina()
                << " i perimetar L=" << perimetar() << endl;
       }
   }

//    Ако x и y се исти, тогаш формата не е правоаголник туку е повторно квадрат. Во тој случај pecati() се повикува исто како за квадрат.
//    При препокривање на методите во класата Pravoagolnik мора да има повик кон истоимените методи од класата Kvadrat



//    default конструктор
//            конструктор Pravoagolnik (const Kvadrat &k, double x, double y)
//    copy конструктор
//    Да се препокријат трите методи дефинирани погоре за класата Kvadrat.

};



int main()
{
    int n;
    double a, x, y;
    Kvadrat *kvadrati;
    Pravoagolnik *pravoagolnici;

    cin >> n;

    kvadrati = new Kvadrat[n];
    pravoagolnici = new Pravoagolnik[n];

    for (int i = 0; i < n; i++)
    {
        cin >> a;

        kvadrati[i] = Kvadrat(a);
    }

    for (int i = 0; i < n; i++)
    {
        cin >> x >> y;

        pravoagolnici[i] = Pravoagolnik(kvadrati[i], x, y);
    }

    int testCase;
    cin >> testCase;

    if (testCase == 1)
    {
        cout << "===Testiranje na klasata Kvadrat===" << endl;
        for (int i = 0; i < n; i++)
            kvadrati[i].pecati();
    }
    else
    {
        cout << "===Testiranje na klasata Pravoagolnik===" << endl;
        for (int i = 0; i < n; i++)
            pravoagolnici[i].pecati();
    }
}





NBAPlayer
Да се дефинира класа NBAPlayer за која ќе се чуваат:

динамички алоцирана низа од карактери за името на играчот
низа од максимум 40 карактери за тимот во кој играчот моментално настапува
просечен број на поени на играчот оваа сезона (double)
просечен број на асистенции на играчот оваа сезона (double)
просечен број на скокови на играчот оваа сезона (double)
За потребите на класата да се дефинираат:

default конструктор и конструктор со аргументи
copy constructor и оператор =
деструктор
метод rating() кој го враќа рејтингот на кошаркарот кој се пресметува како:

45% од поените + 30% од асистенциите + 25% од скоковите

метод print() кој го печати играчот во следниот формат:

Име - тим

Points: поени

Assists: асистенции

Rebounds: скокови

Rating: рејтинг

AllStarPlayer
Од претходната класа NBAPlayer да се изведе класата AllStarPlayer за која дополнително ќе се чуваат и:

просечен број на поени на играчот од All Star натпреварите (double)
просечен број на асистенции на играчот од All Star натпреварите (double)
просечен број на скокови на играчот од All Star натпреварите (double)
За потребите на класата да се дефинираат:

default конструктор
конструктор кој прима објект од NBAPlayer и плус додатните информации (погледни main)
конструктор кој ги прима сите аргументи (погледни main)
copy constructor, оператор =, деструктор
метод allStarRating() кој го враќа рејтингот на кошаркарот од All Star натпреварите и кој се пресметува како:

30% од поените + 40% од асистенциите + 30% од скоковите

Да се препокријат методите:

rating() кој го враќа просекот од обичниот рејтинг на кошаркарот и неговиот All Star рејтинг
print() кој покрај основните информации за кошаркарот печати и:

All Star Rating: рејтингот од All Star натпреварите

New Rating: просечниот рејтинг

For example:

Input	Result
1
Nikola_Jokic Denver_Nuggets 18.3 6.1 10.6
Lonzo_Ball Los_Angeles_Lakers 10.2 7.2 6.9
Donovan_Mitchell Utah_Jazz 20.4 3.6 3.7
Ben_Simmons Philadelphia_76ers 16 8.2 8.2
Kristaps_Porzingis New_York_Knicks 22.7 1.2 6.6
NBA PLAYERS:
=====================================
Nikola_Jokic - Denver_Nuggets
Points: 18.3
Assists: 6.1
Rebounds: 10.6
Rating: 12.715
Lonzo_Ball - Los_Angeles_Lakers
Points: 10.2
Assists: 7.2
Rebounds: 6.9
Rating: 8.475
Donovan_Mitchell - Utah_Jazz
Points: 20.4
Assists: 3.6
Rebounds: 3.7
Rating: 11.185
Ben_Simmons - Philadelphia_76ers
Points: 16
Assists: 8.2
Rebounds: 8.2
Rating: 11.71
Kristaps_Porzingis - New_York_Knicks
Points: 22.7
Assists: 1.2
Rebounds: 6.6
Rating: 12.225






#include <iostream>
#include <string>
#include <cmath>
#include <cstring>
#include <string.h>
#include <iomanip>
using namespace std;

class NBAPlayer {
private:
    char *name;
    char team[40];
    double points;
    double assists;
    double jumps;

public:
    NBAPlayer(char *name = "", char *team = "", double points = 0, double assists = 0, double jumps = 0) {
        this->name = new char(::strlen(name) + 1);
        ::strcpy(this->name, name);
        ::strcpy(this->team, team);
        this->points = points;
        this->assists = assists;
        this->jumps = jumps;
    }

    NBAPlayer(const NBAPlayer &other) {
        this->name = new char(::strlen(other.name) + 1);
        ::strcpy(this->name, other.name);
        ::strcpy(this->team, other.team);
        this->points = other.points;
        this->assists = other.assists;
        this->jumps = other.jumps;
    }

    ~NBAPlayer() {
        delete[] name;
    }

    NBAPlayer& operator=(const NBAPlayer& u) {
        if (this != &u) {
            delete[] name;
            this->name = new char[strlen(u.name) + 1];
            strcpy(this->name, u.name);
            ::strcpy(this->team, u.team);
            this->points = u.points;
            this->assists = u.assists;
            this->jumps = u.jumps;
        }
        return *this;
    }

    double rating() {
        return (0.45 * points) + (0.30 * assists) + (0.25 * jumps);
    }

    void print() {
        cout << name << " - " << team << endl;
        cout << "Points: " << points << endl;
        cout << "Assists: " << assists << endl;
        cout << "Rebounds: " << jumps << endl;
        cout << "Rating: " << rating() << endl;
    }
};
class AllStarPlayer : public NBAPlayer {
private:
    double allStarPoints;
    double allStarAssists;
    double allStarRebounds;

public:
    // Default constructor
    AllStarPlayer() : NBAPlayer(), allStarPoints(0), allStarAssists(0), allStarRebounds(0) {}

    // Parameterized constructor
    AllStarPlayer(char *name, char *team, double points, double assists, double jumps, double allStarPoints=0,
                  double allStarAssists=0, double allStarRebounds=0) : NBAPlayer(name, team, points, assists, jumps),
                                                                       allStarPoints(allStarPoints),
                                                                       allStarAssists(allStarAssists),
                                                                       allStarRebounds(allStarRebounds) {
        this->allStarPoints = allStarPoints;
        this->allStarAssists = allStarAssists;
        this->allStarRebounds = allStarRebounds;
    }

    // Copy constructor
    AllStarPlayer(const AllStarPlayer &other) : NBAPlayer(other) {
        this->allStarPoints = other.allStarPoints;
        this->allStarAssists = other.allStarAssists;
        this->allStarRebounds = other.allStarRebounds;
    }

    // Assignment operator
    AllStarPlayer& operator=(const AllStarPlayer &a) {
        if (this != &a) {
            NBAPlayer::operator=(a);  // Calls the assignment operator of the base class
            this->allStarPoints = a.allStarPoints;
            this->allStarAssists = a.allStarAssists;
            this->allStarRebounds = a.allStarRebounds;
        }
        return *this;
    }

    // Rating function
    double allStarRating() {
        return (0.30 * allStarPoints) + (0.40 * allStarAssists) + (0.30 * allStarRebounds);
    }

    // Print function
    void print() {
        NBAPlayer::print();  // Prints the base player details
        cout << "All Star Rating: " << allStarRating() << endl;
        cout << "New Rating: " << rating() << endl;
    }

    // Rating that combines the base and All Star ratings
    double rating() {
        return (NBAPlayer::rating() + allStarRating()) / 2.0;
    }
};


int main() {
    char name[50];
    char team[40];
    double points;
    double assists;
    double rebounds;
    double allStarPoints;
    double allStarAssists;
    double allStarRebounds;

    NBAPlayer* players = new NBAPlayer[5];
    AllStarPlayer* asPlayers = new AllStarPlayer[5];
    int n;
    cin >> n;

    if (n == 1) {
        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i) {
            cin >> name >> team >> points >> assists >> rebounds;
            players[i] = NBAPlayer(name, team, points, assists, rebounds);
            players[i].print();
        }
    } else if (n == 2) {
        for (int i = 0; i < 5; ++i) {
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            players[i] = NBAPlayer(name, team, points, assists, rebounds);
            asPlayers[i] = AllStarPlayer(name, team, points, assists, rebounds, allStarPoints, allStarAssists, allStarRebounds);
        }

        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i)
            players[i].print();

        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i)
            asPlayers[i].print();

    } else if (n == 3) {
        for (int i = 0; i < 5; ++i) {
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            asPlayers[i] = AllStarPlayer(name, team, points, assists, rebounds, allStarPoints, allStarAssists, allStarRebounds);
        }
        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i)
            asPlayers[i].print();
    }

    delete[] players;
    delete[] asPlayers;
}

-----------------------------------------------------------------------------------------------------------------------------------------------


#include <iostream>
#include <iomanip>
#include <cstring>
#include <cmath>
#include <cctype>

using namespace std;

//NBAPlayer
//        Да се дефинира класа NBAPlayer за која ќе се чуваат:
//
//динамички алоцирана низа од карактери за името на играчот
//        низа од максимум 40 карактери за тимот во кој играчот моментално настапува
//просечен број на поени на играчот оваа сезона (double)
//просечен број на асистенции на играчот оваа сезона (double)
//просечен број на скокови на играчот оваа сезона (double)
class NBAPlayer{
protected:
    char *name;
    char team[40];
    double points;
    double assists;
    double jumps;

    void copyNBAPlayer(const NBAPlayer &n){
        this->name=new char[::strlen(n.name)+1];
        ::strcpy(this->name,n.name);
        ::strcpy(this->team,n.team);
        this->points=n.points;
        this->jumps=n.jumps;
        this->assists=n.assists;
    }

public:
//    За потребите на класата да се дефинираат:
    NBAPlayer(){
    name= nullptr;
    team[0]='\0';
    points=0;
    assists=0;
    jumps=0;
}

    NBAPlayer(char *name, char *team, double points, double assists, double jumps){
        this->name=new char[::strlen(name)+1];
        ::strcpy(this->name,name);
        ::strcpy(this->team,team);
        this->points=points;
        this->jumps=jumps;
        this->assists=assists;
}

//    default конструктор и конструктор со аргументи
//            copy constructor и оператор =
    NBAPlayer(const NBAPlayer &other){
        copyNBAPlayer(other);
    }


    NBAPlayer &operator=(const NBAPlayer &other){
            if(this!=&other){
                delete[]name;
                copyNBAPlayer(other);
            }
        return *this;
    }

    //    метод rating() кој го враќа рејтингот на кошаркарот кој се пресметува како:
            double rating(){
                return (0.45 * points) + (0.30 * assists) + (0.25 * jumps);
        }
//            45% од поените + 30% од асистенциите + 25% од скоковите

//    метод print() кој го печати играчот во следниот формат:

        void print(){
            cout << name << " - " << team << endl;
            cout << "Points: " << points << endl;
            cout << "Assists: " << assists << endl;
            cout << "Rebounds: " << jumps << endl;
            cout << "Rating: " << rating() << endl;
    }

//            Име - тим
//
//            Points: поени
//
//            Assists: асистенции
//
//            Rebounds: скокови
//
//    Rating: рејтинг


    ~NBAPlayer(){
        delete []name;
    }
//    деструктор


};

class AllStarPlayer : public NBAPlayer {
private:
    double allStarPoints;
    double allStarAssists;
    double allStarRebounds;

    void copyAllStarPlayer(const AllStarPlayer &a) {
        this->allStarPoints = a.allStarPoints;
        this->allStarAssists = a.allStarAssists;
        this->allStarRebounds = a.allStarRebounds;
    }

public:
    AllStarPlayer() {
        allStarPoints = 0;
        allStarAssists = 0;
        allStarRebounds = 0;
    }

    // ✅ Constructor from NBAPlayer + additional stats
    AllStarPlayer(const NBAPlayer &player, double allStarPoints, double allStarAssists, double allStarRebounds)
            : NBAPlayer(player) {
        this->allStarPoints = allStarPoints;
        this->allStarAssists = allStarAssists;
        this->allStarRebounds = allStarRebounds;
    }

    // ✅ Full argument constructor
    AllStarPlayer(char *name, char *team, double points, double assists, double jumps,
                  double allStarPoints, double allStarAssists, double allStarRebounds)
            : NBAPlayer(name, team, points, assists, jumps) {
        this->allStarPoints = allStarPoints;
        this->allStarAssists = allStarAssists;
        this->allStarRebounds = allStarRebounds;
    }

    // ✅ Copy constructor
    AllStarPlayer(const AllStarPlayer &other) : NBAPlayer(other) {
        copyAllStarPlayer(other);
    }

    // ✅ Assignment operator
    AllStarPlayer &operator=(const AllStarPlayer &other) {
        if (this != &other) {
            NBAPlayer::operator=(other); // copy base
            copyAllStarPlayer(other);    // copy derived
        }
        return *this;
    }

    double allStarRating() {
        return (0.30 * allStarPoints) + (0.40 * allStarAssists) + (0.30 * allStarRebounds);
    }

    double rating() {
        return (NBAPlayer::rating() + allStarRating()) / 2.0;
    }

    void print() {
        NBAPlayer::print();  // Print base details
        cout << "All Star Rating: " << allStarRating() << endl;
        cout << "New Rating: " << rating() << endl;
    }

    ~AllStarPlayer() {}
};





int main() {

    char name[50];
    char team[40];
    double points;
    double assists;
    double rebounds;
    double allStarPoints;
    double allStarAssists;
    double allStarRebounds;

    NBAPlayer * players = new NBAPlayer[5];
    AllStarPlayer * asPlayers = new AllStarPlayer[5];
    int n;
    cin >> n;

    if (n == 1) {

        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < 5; ++i) {
            cin >> name >> team >> points >> assists >> rebounds;
            players[i] = NBAPlayer(name,team,points,assists,rebounds);
            players[i].print();
        }
    }
    else if (n == 2) {

        for (int i=0; i < 5; ++i){
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            players[i] = NBAPlayer(name,team,points,assists,rebounds);
            asPlayers[i] = AllStarPlayer(players[i],allStarPoints,allStarAssists,allStarRebounds);
        }

        cout << "NBA PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i=0; i < 5; ++i)
            players[i].print();

        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i=0; i < 5; ++i)
            asPlayers[i].print();

    }
    else if (n == 3) {

        for (int i=0; i < 5; ++i){
            cin >> name >> team >> points >> assists >> rebounds;
            cin >> allStarPoints >> allStarAssists >> allStarRebounds;
            asPlayers[i] = AllStarPlayer(name, team, points, assists, rebounds,
                                         allStarPoints,allStarAssists,allStarRebounds);
        }
        cout << "ALL STAR PLAYERS:" << endl;
        cout << "=====================================" << endl;
        for (int i=0; i < 5; ++i)
            asPlayers[i].print();

    }

    delete [] players;
    delete [] asPlayers;
}







