Потребно е да креирате систем за членство во една теретана. За таа цел, најпрво ќе креирате една класа Membership со информации за:

име на членот - низа од максимум 50 знаци
ден на зачленување - низа од максимум 11 знаци (2025-05-05)
месечна членарина - цел број
За основната класа треба да креирате:

Default конструктор
Конструктор со параметри
Copy конструктор
Оператор =
Функција која ќе ја враќа вредноста на месечната членарина (getMonthlyFee)
Функција print што ги печати информациите за членот во формат:
[име и презиме] - [датум на зачленување]


Понатаму потребно е да развиете две класи: BasicMembership и VIPMembership

Класата BasicMembership треба да содржи информација isMorningMembership - boolean вредност за тоа дали членот смее да вежба само до 15:00.



За оваа класа потребно е да креирате:

Default конструктор
Конструктор со параметри
Функција што ќе ја враќа вредноста на месечната членарина (getMonthlyFee), пресметана така што доколку членот смее да вежба само до 15:00, добива 25% попуст на основната месечна членарина. Пример: Доколку месечната членарина е 2000 денари и членот вежба само наутро, оваа функција ќе врати вредност 1500 денари (2000-0.25*2000 = 1500), инаку се добива стандардната висина на месечната членарина.
Функција print што ги печати информациите за членот во формат:
[име и презиме] - [датум на зачленување] - [месечна членарина] - [вежба до 15:00 - yes/no]


Вашата теретана е многу модерна и има спа која е пристаплива само за VIP членовите. Класата VIPMembership треба да содржи информации за:
[16:46 PM]
дали членот го користи спа просторот - boolean вредност
колку часа членот вежбал со тренер - цел број
За оваа класа потребно е да креирате:

Default конструктор
Конструктор со параметри
Функција што ќе ја враќа вредноста на месечната членарина (getMonthlyFee), пресметана така што доколку членот го користи спа просторот, висината се зголемува за 1000 денари. Во пресметката се додава и бројот на часови со тренер. Цена на еден час е 150 денари. Пример: Основната членарина е 2000 денари. Членот го користи спа просторот и вежбал 10 часа со тренер: 2000 + 1000 + 10*150 = 4500 денари.
Функција print што ги печати информациите за членот во формат:
[име и презиме] - [датум на зачленување] - [месечна членарина] - [користи спа - yes/no] - [вкупна сума платена за тренер]

Input
2
John
2025-01-01
2000
1 10
Mark
2025-03-06
1400
1
Result
John - 2025-01-01 - 4500 - yes - 1500
Mark - 2025-03-06 - 1050 - yes
[16:47 PM]
int main()
{
    int n;
    cin >> n;
    char name[50];
    char dateJoined[11];
    int membershipPrice;

    for (int i = 0; i < n; i++)
    {
        cin >> name;
        cin >> dateJoined;
        cin >> membershipPrice;

        Membership m = Membership(name, dateJoined, membershipPrice);

        if (i % 2)
        {
            bool isMorningMembership;
            cin >> isMorningMembership;
            BasicMembership bm = BasicMembership(m, isMorningMembership);
            bm.print();
        }
        else
        {
            bool usesSpa;
            int numOfHoursWithTrainer;
            cin >> usesSpa >> numOfHoursWithTrainer;
            VIPMembership vm = VIPMembership(m, usesSpa, numOfHoursWithTrainer);
            vm.print();
        }
    }

    return 0;
}





#include <iostream>
#include <cstring>
#include <iomanip>

using namespace std;

class Membership {
protected:
    char name[50];
    char date[11];
    int membership;

    void copyMembership(const Membership &m) {
        strcpy(this->name, m.name);
        this->membership = m.membership;
        strcpy(this->date, m.date);
    }

public:
    // Default constructor
    Membership() {
        strcpy(name, "");
        strcpy(date, "");
        membership = 0;
    }

    // Constructor with parameters
    Membership(const char *name, const char *date, int membership) {
        strcpy(this->name, name);
        strcpy(this->date, date);
        this->membership = membership;
    }

    // Copy constructor
    Membership(const Membership &other) {
        copyMembership(other);
    }

    // Assignment operator
    Membership &operator=(const Membership &other) {
        if (this != &other) {
            copyMembership(other);
        }
        return *this;
    }

    // Monthly fee getter
    int getMonthlyFee() const {
        return membership;
    }

    // Print function
    void print() const {
        cout << name << " - " << date << endl;
    }

    // Destructor
    ~Membership() = default;
};

// BasicMembership class
class BasicMembership : public Membership {
private:
    bool isMorningMembership;

public:
    // Default constructor
    BasicMembership() : Membership() {
        isMorningMembership = false;
    }

    // Constructor with base object
    BasicMembership(const Membership &m, bool isMorningMembership) : Membership(m) {
        this->isMorningMembership = isMorningMembership;
    }

    // Monthly fee calculation
    int getMonthlyMembership() const {
        if (isMorningMembership) {
            return membership - (membership * 0.25);
        }
        return membership;
    }

    // Print function
    void print() const {
        cout << name << " - " << date << " - " << getMonthlyMembership() << " - ";
        cout << (isMorningMembership ? "yes" : "no") << endl;
    }
};

// VIPMembership class
class VIPMembership : public Membership {
private:
    bool usesSpa;
    int hoursWithTrainer;

public:
    // Default constructor
    VIPMembership() : Membership() {
        usesSpa = false;
        hoursWithTrainer = 0;
    }

    // Constructor with base object
    VIPMembership(const Membership &other, bool usesSpa, int hoursWithTrainer)
            : Membership(other) {
        this->usesSpa = usesSpa;
        this->hoursWithTrainer = hoursWithTrainer;
    }

    // Monthly fee calculation
    int getMonthlyFee() const {
        int fee = membership;
        if (usesSpa) {
            fee += 1000;
        }
        fee += hoursWithTrainer * 150;
        return fee;
    }

    // Print function
    void print() const {
        cout << name << " - " << date << " - " << getMonthlyFee() << " - ";
        cout << (usesSpa ? "yes" : "no") << " - " << hoursWithTrainer * 150 << endl;
    }
};

// Main function
int main() {
    int n;
    cin >> n;
    char name[50];
    char dateJoined[11];
    int membershipPrice;

    for (int i = 0; i < n; i++) {
        cin >> name;
        cin >> dateJoined;
        cin >> membershipPrice;

        Membership m(name, dateJoined, membershipPrice);

        if (i % 2) {
            bool isMorningMembership;
            cin >> isMorningMembership;
            BasicMembership bm(m, isMorningMembership);
            bm.print();
        } else {
            bool usesSpa;
            int numOfHoursWithTrainer;
            cin >> usesSpa >> numOfHoursWithTrainer;
            VIPMembership vm(m, usesSpa, numOfHoursWithTrainer);
            vm.print();
        }
    }

    return 0;
}







Да се дефинира класа Scientist за која ќе се чуваат:

динамички алоцирана низа од карактери за името на научникот

низа од максимум 50 карактери за институцијата каде што работи

вкупен број објавени трудови (int)

вкупен број цитати од тие трудови (int)

вкупен број години истражувачка работа (int)

За потребите на класата да се дефинираат:

default конструктор и конструктор со аргументи

copy constructor и оператор =

деструктор

метод impact() кој го враќа научниот импакт според формулата: (цитати * 0.5 + трудови * 0.3 + години * 0.2)

метод print() кој печати:

Name: <име> - Institution: <институција>  
Publications: <трудови>  
Citations: <цитати>  
Experience: <години>  
Impact Score: <импакт>
Од класата Scientist да се изведе ResearchScientist, за која дополнително се чуваат:

вкупен број објавени трудови во реномирани списанија (Q1) (int)

вкупен број проекти финансирани од Европска Унија (int)

вкупна добиена сума од проекти во евра (double)

Да се дефинираат:
default конструктор

конструктор со Scientist + нови аргументи

конструктор со сите аргументи

copy constructor, оператор =, деструктор

метод researchImpact() кој се пресметува како: (Q1 * 0.4 + проекти * 0.2 + добиена сума/10000 * 0.4)

Да се препокријат:

impact() – враќа просек од обичниот импакт и researchImpact()

print() – печати :

Q1 Publications: <број>  
EU Projects: <број>  
Total Funding: <сума>  
Research Impact: <impact>  
Overall Impact: <просек>


Да се дефинира глобална функција void printHighestImpact(Scientist* scientists, int count) која го наоѓа научникот со најголем импакт.
 (edited)
NEW
[23:20 PM]
Input    
1
2
Alice ResearchLab 10 100 5
Bob InstituteA 20 200 10

Result
SCIENTISTS:
=====================================
Alice - ResearchLab
Publications: 10
Citations: 100
Experience (Years): 5
Impact Score: 54
-------------------------
Bob - InstituteA
Publications: 20
Citations: 200
Experience (Years): 10
Impact Score: 108
-------------------------
Testing Copy Constructor:
Alice - ResearchLab
Publications: 10
Citations: 100
Experience (Years): 5
Impact Score: 54
Testing Assignment Operator:
Bob - InstituteA
Publications: 20
Citations: 200
Experience (Years): 10
Impact Score: 108
NEW
[23:21 PM]
Test case za globalnata funkcija:
Input
3
3
Alice ResearchLab 10 100 5
Bob InstituteA 20 200 10
Charlie HighTechCorp 15 150 8

Output
Scientist with the Highest Impact:
Bob - InstituteA
Publications: 20
Citations: 200
Experience (Years): 10
Impact Score: 108


#include <iostream>
#include <cstring>
using namespace std;

class Scientist {
protected:
    char* name;
    char institution[50];
    int papers;
    int citations;
    int experience;
public:
    explicit Scientist(const char* name = "", const char* institution = "", const int papers = 0, const int citations = 0,
    const int experience = 0) {
        this->name = new char[strlen(name)+1];
        strcpy(this->name, name);
        strcpy(this->institution, institution);
        this->papers = papers;
        this->citations = citations;
        this->experience = experience;
    }
    Scientist(const Scientist &other) {
        this->name = new char[strlen(other.name)+1];
        strcpy(this->name, other.name);
        strcpy(this->institution, other.institution);
        this->papers = other.papers;
        this->citations = other.citations;
        this->experience = other.experience;
    }
    virtual ~Scientist() {
        delete[] name;
    }
    Scientist &operator=(const Scientist &other) {
        if(this != &other) {
            delete[] this->name;
            this->name = new char[strlen(other.name)+1];
            strcpy(this->name, other.name);
            strcpy(this->institution, other.institution);
            this->papers = other.papers;
            this->citations = other.citations;
            this->experience = other.experience;
        }
        return *this;
    }
    virtual double impact() const {
        return citations * 0.5 + papers * 0.3 + experience * 0.2;
    }
    virtual void print() const {
        cout << name << " - " << institution << endl
        << "Publications: " << papers << endl
        << "Citations: " << citations << endl
        << "Experience (Years): " << experience << endl
        << "Impact Score: " << impact() << endl;
    }
};

class ResearchScientist final : public Scientist {
private:
    int q1_papers;
    int eu_projects;
    double earnings;
public:
    explicit ResearchScientist(const char* name = "", const char* institution = "", const int papers = 0, const int citations = 0,
    const int experience = 0, const int q1_papers = 0, const int eu_projects = 0, const double earnings = 0.0)
    : Scientist(name, institution, papers, citations, experience) {
        this->q1_papers = q1_papers;
        this->eu_projects = eu_projects;
        this->earnings = earnings;
    }
    ResearchScientist(const ResearchScientist &other) : Scientist(other) {
        this->q1_papers = other.q1_papers;
        this->eu_projects = other.eu_projects;
        this->earnings = other.earnings;
    }
    ~ResearchScientist() override = default;
    ResearchScientist &operator=(const ResearchScientist &other) {
        if(this != &other) {
            Scientist::operator=(other);
            this->q1_papers = other.q1_papers;
            this->eu_projects = other.eu_projects;
            this->earnings = other.earnings;
        }
        return *this;
    }
    double researchImpact() const {
        return q1_papers * 0.4 + eu_projects * 0.2 + ((earnings/10000) * 0.4);
    }
    double impact() const override {
        return (Scientist::impact() + researchImpact()) / 2;
    }
    void print() const override {
        Scientist::print();
        cout << "Q1 Publications: " << q1_papers << endl
        << "EU Projects: " << eu_projects << endl
        << "Total Funding: " << earnings << " EUR" << endl
        << "Research Impact: " << researchImpact() << endl
        << "Overall Impact: " << impact() << endl;
    }
};

void printHighestImpact(Scientist* scientists, int count) {
    int index = 0;
    for(int i = 1; i < count; i++) {
        if(scientists[i].impact() > scientists[index].impact()) {
            index = i;
        }
    }
    cout << "Scientist with the Highest Impact:" << endl;
    scientists[index].print();
}

int main() {
    int n;
    cin >> n;

    if (n == 1) {
        // Test Scientist (Basic)
        int numScientists;
        cin >> numScientists;

        Scientist* scientists = new Scientist[numScientists];

        for (int i = 0; i < numScientists; ++i) {
            char name[100], institution[50];
            int publications, citations, years;
            cin >> name >> institution >> publications >> citations >> years;

            scientists[i] = Scientist(name, institution, publications, citations, years);
        }

        cout << "SCIENTISTS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numScientists; ++i) {
            scientists[i].print();
            cout << "-------------------------" << endl;
        }

        // Copy Constructor Test
        cout << "Testing Copy Constructor:" << endl;
        Scientist copiedScientist = scientists[0];
        copiedScientist.print();

        // Assignment Operator Test
        cout << "Testing Assignment Operator:" << endl;
        Scientist assignedScientist;
        assignedScientist = scientists[1];
        assignedScientist.print();

        delete[] scientists;
    }
    else if (n == 2) {
        // Test ResearchScientist
        int numScientists;
        cin >> numScientists;

        ResearchScientist* scientists = new ResearchScientist[numScientists];

        for (int i = 0; i < numScientists; ++i) {
            char name[100], institution[50];
            int publications, citations, years, Q1publications, EUprojects;
            double funding;

            cin >> name >> institution >> publications >> citations >> years;
            cin >> Q1publications >> EUprojects >> funding;

            scientists[i] = ResearchScientist(name, institution, publications, citations, years, Q1publications, EUprojects, funding);
        }

        cout << "RESEARCH SCIENTISTS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numScientists; ++i) {
            scientists[i].print();
            cout << "-------------------------" << endl;
        }

        // Copy Constructor Test
        cout << "Testing Copy Constructor:" << endl;
        ResearchScientist copiedResearchScientist = scientists[0];
        copiedResearchScientist.print();

        // Assignment Operator Test
        cout << "Testing Assignment Operator:" << endl;
        ResearchScientist assignedResearchScientist;
        assignedResearchScientist = scientists[1];
        assignedResearchScientist.print();

        delete[] scientists;
    }
    else if (n == 3) {
        // Test printing scientist with highest impact
        int numScientists;
        cin >> numScientists;

        Scientist* scientists = new Scientist[numScientists];

        for (int i = 0; i < numScientists; ++i) {
            char name[100], institution[50];
            int publications, citations, years;
            cin >> name >> institution >> publications >> citations >> years;

            scientists[i] = Scientist(name, institution, publications, citations, years);
        }

        printHighestImpact(scientists, numScientists);
        delete[] scientists;
    }

    return 0;
}

-----------------------------------------------------------------------------------------------------






#include <iostream>
#include <cstring>
#include <iomanip>

using namespace std;

class Scientist {
protected:
    char* name;
    char ins[50];
    int papers;
    int citation;
    int experience;

    void copyScientist(const Scientist& s) {
        this->name = new char[strlen(s.name) + 1];
        strcpy(this->name, s.name);
        strcpy(this->ins, s.ins);
        this->papers = s.papers;
        this->citation = s.citation;
        this->experience = s.experience;
    }

public:
    Scientist() {
        name = new char[1];
        name[0] = '\0';
        strcpy(ins, "w");
        papers = 0;
        citation = 0;
        experience = 0;
    }

    Scientist(char* name, char* ins, int papers, int citation, int experience) {
        this->name = new char[strlen(name) + 1];
        strcpy(this->name, name);
        strcpy(this->ins, ins);
        this->papers = papers;
        this->citation = citation;
        this->experience = experience;
    }

    Scientist(const Scientist& other) {
        copyScientist(other);
    }

    Scientist& operator=(const Scientist& other) {
        if (this != &other) {
            delete[] name;
            copyScientist(other);
        }
        return *this;
    }

    virtual double impact() const {
        return citation * 0.5 + papers * 0.3 + experience * 0.2;
    }

    virtual void print() const {
        cout << name << " - " << ins << endl;
        cout << "Publications: " << papers << endl;
        cout << "Citations: " << citation << endl;
        cout << "Experience (Years): " << experience << endl;
        cout << "Impact Score: " << impact() << endl;
    }

    virtual ~Scientist() {
        delete[] name;
    }
};

class ResearchScientist : public Scientist {
private:
    int q1_papers;
    int eu_projects;
    double earnings;

    void copyResearchScientist(const ResearchScientist& r) {
        this->q1_papers = r.q1_papers;
        this->eu_projects = r.eu_projects;
        this->earnings = r.earnings;
    }

public:
    ResearchScientist() : Scientist() {
        q1_papers = 0;
        eu_projects = 0;
        earnings = 0.0;
    }

    ResearchScientist(char* name, char* ins, int papers, int citation, int experience,
                      int q1_papers, int eu_projects, double earnings)
            : Scientist(name, ins, papers, citation, experience) {
        this->q1_papers = q1_papers;
        this->eu_projects = eu_projects;
        this->earnings = earnings;
    }

   

    ResearchScientist(const ResearchScientist& other)
            : Scientist(other) {
        copyResearchScientist(other);
    }

    ResearchScientist& operator=(const ResearchScientist& other) {
        if (this != &other) {
            Scientist::operator=(other); // ✅ Don't forget base class
            copyResearchScientist(other);
        }
        return *this;
    }

    double researchImpact() const {
        return q1_papers * 0.4 + eu_projects * 0.2 + (earnings / 10000.0 * 0.4);
    }

    double impact() const override {
        return (Scientist::impact() + researchImpact()) / 2;
    }

    void print() const override {
        Scientist::print();
        cout << "Q1 Publications: " << q1_papers << endl
             << "EU Projects: " << eu_projects << endl
             << "Total Funding: " << earnings << " EUR" << endl
             << "Research Impact: " << researchImpact() << endl
             << "Overall Impact: " << impact() << endl;
    }

    ~ResearchScientist() override {
        // No dynamic memory in derived class, nothing to clean
    }
};

void printHighestImpact(Scientist* scientists, int count) {
    int maxIndex = 0;
    for (int i = 1; i < count; ++i) {
        if (scientists[i].impact() > scientists[maxIndex].impact()) {
            maxIndex = i;
        }
    }

    cout << "Scientist with the Highest Impact:" << endl;
    scientists[maxIndex].print();
}

int main() {
    int n;
    cin >> n;

    if (n == 1) {
        int numScientists;
        cin >> numScientists;

        Scientist* scientists = new Scientist[numScientists];

        for (int i = 0; i < numScientists; ++i) {
            char name[100], institution[50];
            int publications, citations, years;
            cin >> name >> institution >> publications >> citations >> years;

            scientists[i] = Scientist(name, institution, publications, citations, years);
        }

        cout << "SCIENTISTS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numScientists; ++i) {
            scientists[i].print();
            cout << "-------------------------" << endl;
        }

        cout << "Testing Copy Constructor:" << endl;
        Scientist copiedScientist = scientists[0];
        copiedScientist.print();

        cout << "Testing Assignment Operator:" << endl;
        Scientist assignedScientist;
        assignedScientist = scientists[1];
        assignedScientist.print();

        delete[] scientists;
    }
    else if (n == 2) {
        int numScientists;
        cin >> numScientists;

        ResearchScientist* scientists = new ResearchScientist[numScientists];

        for (int i = 0; i < numScientists; ++i) {
            char name[100], institution[50];
            int publications, citations, years, Q1publications, EUprojects;
            double funding;

            cin >> name >> institution >> publications >> citations >> years;
            cin >> Q1publications >> EUprojects >> funding;

            // ✅ Use the new constructor
            scientists[i] = ResearchScientist(name, institution, publications, citations, years, Q1publications, EUprojects, funding);
        }

        cout << "RESEARCH SCIENTISTS:" << endl;
        cout << "=====================================" << endl;
        for (int i = 0; i < numScientists; ++i) {
            scientists[i].print();
            cout << "-------------------------" << endl;
        }

        cout << "Testing Copy Constructor:" << endl;
        ResearchScientist copiedResearchScientist = scientists[0];
        copiedResearchScientist.print();

        cout << "Testing Assignment Operator:" << endl;
        ResearchScientist assignedResearchScientist;
        assignedResearchScientist = scientists[1];
        assignedResearchScientist.print();

        delete[] scientists;
    }
    else if (n == 3) {
        int numScientists;
        cin >> numScientists;

        Scientist* scientists = new Scientist[numScientists];

        for (int i = 0; i < numScientists; ++i) {
            char name[100], institution[50];
            int publications, citations, years;
            cin >> name >> institution >> publications >> citations >> years;

            scientists[i] = Scientist(name, institution, publications, citations, years);
        }

        printHighestImpact(scientists, numScientists);
        delete[] scientists;
    }

    return 0;
}



