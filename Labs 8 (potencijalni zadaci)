Дизајнирате програма за систем за онлајн курсеви. Треба да креирате базична класа наречена Course, која ќе претставува генерички онлајн курс и ќе ги содржи следниве две чисти виртуелни функции:

displayCourseInfo()
isRecommendedForBeginners()
Потоа треба да креирате две подкласи на Course наречени:

BasicCourse
AdvancedCourse
Класата BasicCourse треба да ги содржи следниве информации:

includesCertificate – bool променлива
Имплементирајте ги функциите на следниов начин:

displayCourseInfo() треба да испечати:
This is a basic course focused on core fundamentals.
Ако курсот вклучува сертификат, додадете: It provides a certificate upon completion.
isRecommendedForBeginners() треба да враќа true секогаш, бидејќи е наменет за почетници.
Класата AdvancedCourse треба да ги содржи следниве информации:

hasPrerequisites – bool променлива
Имплементирајте ги функциите на следниов начин:

displayCourseInfo() треба да испечати:
This is an advanced course with in-depth material and interactive sessions.
Ако има предуслови, додадете: Prior knowledge is required.
isRecommendedForBeginners() треба да враќа false ако hasPrerequisites == true, во спротивно true






Да се креира класа Game за опишување на видеоигра. Класата треба да содржи:

name (низа од максимум 50 знаци),
конструктор со аргументи,
оператор == за споредба на две игри (споредба по име)
гетер getName()

Потоа да се креира апстрактна класа Gamer која содржи информации за гејмер и тоа:
username (динамички алоцирана низа од знаци)
games (низа од максимум 50 игри)
numGames (цел број)
hoursPerWeek (цел број)
Класата треба да содржи:
Конструктор со аргументи
Copy конструктор
Оператор=
Деструктор
Функција bool playsGame(const Game &game) која враќа дали гејмерот ја игра дадената игра
Дополнително класата треба да содржи два чисто виртуелни (апстрактни) методи:
const char* calculateSkillLevel() - за пресметување на нивото на вештина на гејмерот.
void printInfo() - за печатење на информациите за гејмерот
Од оваа класа да се изведат класите PCGamer и ConsoleGamer кои го специфицираат типот на гејмерот.

За секој PCGamer дополнително се чуваат следните информации:

streamHours (цел број)
Класата треба да содржи:

Конструктор со аргументи
Copy конструктор
Оператор=
Деструктор
Имплементација на чисто виртуелните методи од Gamer
Нивото на вештина (calculateSkillLevel()) за PCGamer се одредува според следниве правила:

Доколку гејмерот игра повеќе од 30 часа неделно и стримува повеќе од 20 часа, се смета за „Pro PCGamer“.
Во спротивно, се смета за „Casual PCGamer“.
Функцијата за печатење (printInfo()) на податоци треба да биде во следниов формат:
PCGamer : [име], Hours Per Week: [часови]h, Skill Level: [ниво]

За секој ConsoleGamer дополнително се чуваат следните информации:

isProPlayer (bool вредност)
Класата треба да содржи:

Конструктор со аргументи
Copy конструктор
Оператор=
Деструктор
Имплементација на чисто виртуелните методи од Gamer
Нивото на вештина (calculateSkillLevel()) за ConsoleGamer се одредува според следниве правила:

Доколку е означен како професионален играч, се смета за „Pro ConsoleGamer“.
Во спротивно, се смета за „Casual ConsoleGamer“.
Функцијата за печатење (printInfo()) на податоци треба да биде во следниов формат:


ConsoleGamer: [име], Hours Per Week: [часови]h, Skill Level: [ниво]

Да се дефинира глобална функција void printGamersThatPlayGame(Gamer *gamers[], int n, const Game &game) што на влез прима низа од покажувачи кон објекти од класата Gamer, нивниот број и игра, а како резултат ги печати информациите за сите играчи кои ја играат дадената игра и дополнително имаат hoursPerWeek поголем од просечниот на играчите кои ја играат дадената игра.


int main() {
int n;
cin >> n;
cin.ignore();

Gamer* gamers[n];

for (int i = 0; i < n; ++i) {
char username[30];
char gameName[50];
int numGames, hoursPerWeek, streamHours, isProPlayer;

cin.getline(username, 30);
cin >> numGames;
cin.ignore();

Game games[50];
for (int j = 0; j < numGames; ++j) {
cin.getline(gameName, 50);
games[j] = Game(gameName);
}

cin >> hoursPerWeek;
cin.ignore();

if (i % 2 == 0) {
cin >> streamHours;
cin.ignore();
gamers[i] = new PCGamer(username, games, numGames, hoursPerWeek, streamHours);
} else {
cin >> isProPlayer;
cin.ignore();
gamers[i] = new ConsoleGamer(username, games, numGames, hoursPerWeek, isProPlayer);
}
}

char gameQuery[50];
cin.getline(gameQuery, 50);
printGamersThatPlayGame(gamers, n, Game(gameQuery));

for (int i = 0; i < n; ++i) {
delete gamers[i];
}

return 0;
}
